import{_ as t,r as o,o as p,c as l,a as n,b as a,d as e,e as i}from"./app.1a944c02.js";const c={},r=n("h1",{id:"middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#middleware","aria-hidden":"true"},"#"),a(" Middleware")],-1),u=n("p",null,"Lamware is built around the idea of Middleware being used to modify and transform a function. Middleware comes down to being a plain object, which can optionally define various hooks and wrappers.",-1),d=n("h2",{id:"official-middleware",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#official-middleware","aria-hidden":"true"},"#"),a(" Official Middleware")],-1),k={href:"https://github.com/evilkiwi/lamware/tree/master/packages",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/evilkiwi/lamware/tree/master/packages/apollo",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/evilkiwi/lamware/tree/master/packages/appconfig",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/evilkiwi/lamware/tree/master/packages/do-not-wait",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"callbackWaitsForEmptyEventLoop",-1),b=n("code",null,"false",-1),h={href:"https://github.com/evilkiwi/lamware/tree/master/packages/fastify",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/evilkiwi/lamware/tree/master/packages/memoize",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/evilkiwi/lamware/tree/master/packages/powertools-logger",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/evilkiwi/lamware/tree/master/packages/powertools-metrics",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/evilkiwi/lamware/tree/master/packages/powertools-tracing",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/evilkiwi/lamware/tree/master/packages/prisma",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/evilkiwi/lamware/tree/master/packages/secrets-manager",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/evilkiwi/lamware/tree/master/packages/sentry",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/evilkiwi/lamware/tree/master/packages/sqs-json-parser",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/evilkiwi/lamware/tree/master/packages/warmer",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"lambda-warmer",-1),L=i(`<h2 id="third-party-middleware" tabindex="-1"><a class="header-anchor" href="#third-party-middleware" aria-hidden="true">#</a> Third-Party Middleware</h2><div class="custom-container tip"><p class="custom-container-title">Hmm</p><p>We don&#39;t have anything here yet. Want to add your own middleware? Open a PR!</p></div><h2 id="developing-middleware" tabindex="-1"><a class="header-anchor" href="#developing-middleware" aria-hidden="true">#</a> Developing Middleware</h2><p>Middleware is, at its core, just an object. You can use the <code>Middleware</code> type from <code>@lamware/core</code> to ensure things are typed correctly.</p><p>One important thing to note is that, whilst not required, providing a <code>Handler</code> type to the <code>Middleware</code> interface is recommended. It will properly type your hooks, as well as providing a type error should someone try to use your Middleware on an unsupported type.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you can define middleware in-line with the <code>use()</code> function:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lamware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">lamware</span><span class="token generic class-name"><span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">use</span><span class="token generic class-name"><span class="token operator">&lt;</span>Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> Hooks</h3><p>Lamware provides three runtime hooks:</p><ul><li><code>before</code> - Runs <em>before</em> the Handler is executed.</li><li><code>after</code> - Runs <em>after</em> the Handler is executed.</li><li><code>uncaughtException</code> - Runs if an uncaught exception happens during <code>before</code>, <code>after</code> or the Handler itself. Useful for error/crash reporting, cleaning up after a failure, etc.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// You can set state (see below)</span>
        payload<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> helloWorld <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Or return a response and exit the function early.</span>
        payload<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">401</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// You can also modify the function event and context.</span>
        payload<span class="token punctuation">.</span>event<span class="token punctuation">.</span>rawPath <span class="token operator">=</span> <span class="token string">&#39;/hello-world&#39;</span><span class="token punctuation">;</span>
        payload<span class="token punctuation">.</span>context<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">after</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// The response here is from the function itself, and you can modify it.</span>
        payload<span class="token punctuation">.</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">uncaughtException</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token punctuation">,</span> cause <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * See &quot;Handling Errors&quot; below!
         */</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h3><p>Middleware is stateless, other than modifying its own custom state object, which will be merged in to the state used by the function. You can provide typings for this state, which will also be merged and used in the function handler.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    helloWorld<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> State<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        payload<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
            helloWorld <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization" aria-hidden="true">#</a> Initialization</h3><p>Middleware can provide an <code>init</code> function which will be called before the Lambda function is executed. This is useful for memoizing instances in to state, fetching data from an API, or any other asynchronous operation.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    helloWorld<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> State<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Pull data from API etc.</span>

        <span class="token comment">// You can also return your initial state here.</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            helloWorld<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="handling-errors" tabindex="-1"><a class="header-anchor" href="#handling-errors" aria-hidden="true">#</a> Handling Errors</h3><p>As mentioned previously, Lamware has an <code>uncaughtException</code> hook. If provided, this will be executed whenever an uncaught exception occurs within:</p><ul><li><code>before</code> hooks</li><li><code>after</code> hooks</li><li><code>execute()</code> handler</li></ul><p>You can use this to log errors, handle clean-up and anything else that you might want to do if all else fails.</p><p><strong>Note:</strong> If an uncaught exception happens during the <code>uncaughtException</code> hook, it will be thrown top-level. It&#39;s important to catch these yourself if you don&#39;t want anything to potentially return an error for the Lambda Function. For example, if you report errors to an external service via <code>uncaughtException</code>, wrap in a <code>try/catch</code> as the external service may go down.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">uncaughtException</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> exception <span class="token punctuation">}</span> <span class="token operator">=</span> payload<span class="token punctuation">.</span>cause<span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * \`exception\` is the \`Error\` instance that caused the
         * \`uncaughtException\` hook to run.
         */</span>
        <span class="token keyword">await</span> <span class="token function">sendToSentry</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * You should also provide a response. By default it will
         * be an empty object, which will break for APIG v1/v2.
         */</span>
        payload<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token punctuation">{</span>
            statusCode<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> payload<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wrapping-the-handler" tabindex="-1"><a class="header-anchor" href="#wrapping-the-handler" aria-hidden="true">#</a> Wrapping the Handler</h3><p>Sometimes you need to wrap your Handler, for example when using Sentry to allow it to capture handler errors. Through a Lamware middleware, you can provide a wrapper function that will automatically be used for the executed handler.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">wrap</span><span class="token operator">:</span> handler <span class="token operator">=&gt;</span> handler<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the cases where, for example Sentry, you have to provide a regular handler (<code>(event, context, callback) =&gt; {}</code>) instead of the object-based Lamware one, you can use our <code>wrapCompat</code> function to wrap using the compatibility wrapper:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AWSLambda <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@sentry/serverless&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> wrapCompat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">wrap</span><span class="token operator">:</span> handler <span class="token operator">=&gt;</span> <span class="token function">wrapCompat</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> compatHandler <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> AWSLambda<span class="token punctuation">.</span><span class="token function">wrapHandler</span><span class="token punctuation">(</span>compatHandler<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            captureTimeoutWarning<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            rethrowAfterCapture<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            callbackWaitsForEmptyEventLoop<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token operator">...</span><span class="token punctuation">(</span>config<span class="token operator">?.</span>wrapper <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h3><p>Sometimes you may want your Middleware to <em>not</em> be registered, even if the user has added it via <code>.use()</code>. To achieve this, you can implement the <strong>synchronous</strong> <code>filter()</code> function:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">filter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// Returning \`false\` will prevent the Middleware being registered.</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="middleware-purity" tabindex="-1"><a class="header-anchor" href="#middleware-purity" aria-hidden="true">#</a> Middleware Purity</h3><p>When running Middleware hooks, Lamware will run them in parallel. This improves performance, but should your Middleware modify the state in some way (i.e. changing the Lambda <code>context</code> or anything else in the <code>payload</code>) you should tell Lamware that the Middleware <strong>isn&#39;t pure.</strong></p><p>By telling Lamware that your Middleware isn&#39;t pure, it will be sure to run it alone. The order in which Middleware hooks are executed is based on the order the Developer registers them in via <code>.use()</code>, so if your impure Middleware is registered between two pure Middlewares, it will break the chain and run your impure Middleware inbetween them.</p><p>You can do this via the <code>pure</code> property of Middleware:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> myMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware<span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;my-middleware&#39;</span><span class="token punctuation">,</span>
    pure<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// \`true\` by default.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function V(G,W){const s=o("ExternalLinkIcon");return p(),l("div",null,[r,u,d,n("p",null,[a("We maintain some basic and useful Middleware over "),n("a",k,[a("in our GitHub repo"),e(s)]),a(".")]),n("ul",null,[n("li",null,[n("a",m,[a("@lamware/apollo"),e(s)]),a(" - Set-up and memoize Apollo Server in AWS Lambda")]),n("li",null,[n("a",v,[a("@lamware/appconfig"),e(s)]),a(" - Fetch your JSON config from AWS AppConfig & type it")]),n("li",null,[n("a",w,[a("@lamware/do-not-wait"),e(s)]),a(" - Ensure "),y,a(" is set to "),b,a(" for your function")]),n("li",null,[n("a",h,[a("@lamware/fastify"),e(s)]),a(" - Set-up Fastify in Lambda implementing best practises and giving access to Lamware state")]),n("li",null,[n("a",g,[a("@lamware/memoize"),e(s)]),a(" - Helper Middleware for you to memoize anything in a type-safe way")]),n("li",null,[n("a",f,[a("@lamware/powertools-logger"),e(s)]),a(" - Utilize the Official Lambda TypeScript Logging system")]),n("li",null,[n("a",x,[a("@lamware/powertools-metrics"),e(s)]),a(" - Utilize the Official Lambda TypeScript Metrics system")]),n("li",null,[n("a",_,[a("@lamware/powertools-tracing"),e(s)]),a(" - Utilize the Official Lambda TypeScript X-ray Tracing system")]),n("li",null,[n("a",M,[a("@lamware/prisma"),e(s)]),a(" - Set-up and memoize your Prisma Client")]),n("li",null,[n("a",P,[a("@lamware/secrets-manager"),e(s)]),a(" - Fetch & type secret values from AWS Secrets Manager")]),n("li",null,[n("a",H,[a("@lamware/sentry"),e(s)]),a(" - Wrap your function for Sentry Issue tracking")]),n("li",null,[n("a",A,[a("@lamware/sqs-json-parser"),e(s)]),a(" - Safely parse and type SQS JSON payloads")]),n("li",null,[n("a",I,[a("@lamware/warmer"),e(s)]),a(" - Warm your Lambda functions via "),S])]),L])}const T=t(c,[["render",V],["__file","middleware.html.vue"]]);export{T as default};
