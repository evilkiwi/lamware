import{_ as t,r as o,o as p,c,a as s,b as n,d as i,e as a}from"./app.1a944c02.js";const l={},u=a(`<h1 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h1><p>&quot;Getting Started&quot; showed you how to create a function using the new Lamware context, but there are some additional things built-in to Lamware that you should know about!</p><h2 id="middleware-filtering" tabindex="-1"><a class="header-anchor" href="#middleware-filtering" aria-hidden="true">#</a> Middleware Filtering</h2><p>Sometimes you don&#39;t want a middleware to run - for example, not running <code>sentry</code> in a development environment. To achieve this, you can provide a <strong>synchronous</strong> filter function to the <code>.use()</code> call:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sentry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/sentry&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lamware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">lamware</span><span class="token generic class-name"><span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">sentry</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        config<span class="token operator">:</span> <span class="token punctuation">{</span>
            dsn<span class="token operator">:</span> <span class="token string">&#39;my-sentry-dsn&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logger" tabindex="-1"><a class="header-anchor" href="#logger" aria-hidden="true">#</a> Logger</h2>`,6),r=s("code",null,"logger",-1),d=s("code",null,"console",-1),k=s("code",null,"console.log()",-1),m={href:"https://github.com/evilkiwi/lamware/tree/master/packages/powertools-logger",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"logger",-1),g=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> powertoolsLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/powertools-logger&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lamware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">lamware</span><span class="token generic class-name"><span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">powertoolsLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        serviceName<span class="token operator">:</span> <span class="token string">&#39;lamware-example&#39;</span><span class="token punctuation">,</span>
        logLevel<span class="token operator">:</span> <span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initialization-order" tabindex="-1"><a class="header-anchor" href="#initialization-order" aria-hidden="true">#</a> Initialization Order</h2><p>The order in which you <code>.use()</code> Middleware is important - since it is the order in which it will run hooks and initialize.</p><p>By default, <strong>all middleware registered via <code>.use()</code> will initialize in parallel.</strong> Since most Middleware doesn&#39;t rely on state from other Middleware, this works great and helps with cold-start performance. However, should you need to use state from other Middleware, you can register Middleware with the <code>.useSync()</code> registrar.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lamware<span class="token punctuation">,</span> state <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> appconfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/appconfig&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> memoize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/memoize&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sentry <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/sentry&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">lamware</span><span class="token generic class-name"><span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">appconfig</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        app<span class="token operator">:</span> <span class="token string">&#39;evilkiwi-lamware-example&#39;</span><span class="token punctuation">,</span>
        env<span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
        config<span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token doc-comment comment">/**
     * Instead of initializing this Middleware at the same time as the
     * previous Middleware, it creates a break in the chain and initializes
     * alone _after_ the previous middleware but _before_ any of the following
     * Middleware.
     */</span>
    <span class="token punctuation">.</span><span class="token function">useSync</span><span class="token punctuation">(</span><span class="token function">memoize</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>getState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * Since we know for sure AppConfig has loaded at this point, we can
         * safely use the state.
         */</span>
        <span class="token keyword">const</span> myState <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>myState<span class="token punctuation">.</span>config<span class="token punctuation">.</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;oops!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">sentry</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        config<span class="token operator">:</span> <span class="token punctuation">{</span>
            dsn<span class="token operator">:</span> <span class="token string">&#39;my-sentry-dsn&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> logger <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="consuming-state" tabindex="-1"><a class="header-anchor" href="#consuming-state" aria-hidden="true">#</a> Consuming State</h2><p>If defining Middleware in-line, you can consume the current Lamware state defined before your own Middleware is executed. This is exceptionally useful for edge-cases where you need to split-up a Middleware chain using <code>useSync</code> for your own custom logic, for example.</p><p>This is a <strong>huge</strong> gray-area for the following reasons:</p><ol><li>There is no defined way of providing full TypeScript typings to partial, mid-chain state</li><li>The state that is available is based on the execution order (and [a]synchronous nature) of the Middleware you use</li></ol><p>Regardless, the <code>init</code> method in your Middleware has a state getter passed as the first parameter - which, when called, will return the current state at that moment in time.</p><p>See the <a href="#initialization-order">above example</a> to understand exactly how this works with the generic <code>memoize</code> middleware.</p>`,11);function w(h,y){const e=o("ExternalLinkIcon");return p(),c("div",null,[u,s("p",null,[n("Provided via the "),r,n(" payload item, and by default using "),d,n(", you should use this logger as an alternative raw "),k,n(". Middleware you use can override this logger, providing you with easy integration. For example, the "),s("a",m,[n("powertools-logger"),i(e)]),n(" middleware makes "),v,n(" an official NodeJS Lambda logger:")]),g])}const f=t(l,[["render",w],["__file","usage.html.vue"]]);export{f as default};
