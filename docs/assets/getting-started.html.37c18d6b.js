import{_ as t,r as o,o as p,c,a as n,b as a,d as i,e as s}from"./app.1a944c02.js";const l={},r=s(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><h2 id="installing" tabindex="-1"><a class="header-anchor" href="#installing" aria-hidden="true">#</a> Installing</h2><p>Lamware is distributed via NPM and can be installed via <code>@lamware/core</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @lamware/core

<span class="token comment"># or</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @lamware/core
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><p><code>@lamware/core</code> exposes the <code>lamware</code> function, which is the root of the framework. It returns a handler, which you should export for Lambda, and allows chaining middleware and eventually writing your function code.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> lamware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">lamware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s worth noting that the handler you define in <code>execute()</code> uses a new handler format.</p><p>Instead of <code>(event, context, callback) =&gt; {}</code>, the new format passes a single object for you to destructure; <code>({ event, context, callback }) =&gt; {}</code> which, among being cleaner to use, allows Lamware to inject various other states in to the handler for you to use.</p><h3 id="typing" tabindex="-1"><a class="header-anchor" href="#typing" aria-hidden="true">#</a> Typing</h3>`,10),u={href:"https://www.npmjs.com/package/@types/aws-lambda",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"aws-lambda",-1),k=n("code",null,"lamware()",-1),m=n("code",null,"execute()",-1),h=s(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> APIGatewayProxyHandlerV2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;aws-lambda&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> lamware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lamware/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">lamware</span><span class="token generic class-name"><span class="token operator">&lt;</span>APIGatewayProxyHandlerV2<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> event<span class="token punctuation">,</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`event\` and \`context\`, as well as the response type, are now properly typed for API Gateway.</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Awesome</strong> - that covers the basics of how to create your function using Lamware. Move on to Middleware to start taking advantage of this new format.</p>`,2);function v(w,b){const e=o("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[a("Using "),n("a",u,[d,i(e)]),a(" typings, you should always provide a handler type to "),k,a(". It will use this to ensure Middleware compatibility, as well as provide typings for the custom handler defined in "),m,a(". For example:")]),h])}const y=t(l,[["render",v],["__file","getting-started.html.vue"]]);export{y as default};
